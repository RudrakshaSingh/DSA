An unordered set in STL is a container that stores unique elements in no particular order. Every operation on an unordered set takes O(1) complexity in the average case and takes O(n) in the worst case.

Syntax:
>> unordered_set<object_type> variable_name;

Example:
>>unordered_set<int> s;
>>unordered_set<string> str;


-------Functions in unordered set:-------
1: insert() - To insert an element in the unordered set.
  >> unordered_set<int> s;
  >> s.insert(1);
  >> s.insert(2);

2: begin() - Returns an iterator pointing to the first element in the unordered set.
  >> s.begin();

3: end() - Returns an iterator to the theoretical element after the last element.
  >> s.end();

4: count() - Returns 1 if the element is present in the container; otherwise, returns 0.
  >> unordered_set<int> s;
  >> s.insert(1);
  >> s.insert(2);
  >> s.count(2); // returns 1

5: clear() - Deletes all the elements in the unordered set.
  >> s.clear();

6: find() - Searches for an element in the unordered set.
  >> unordered_set<int> s;
  >> s.insert(1);
  >> s.insert(2);
  >> if (s.find(2) != s.end())
  >>     cout << "true" << endl;

7: erase() - Deletes a single element or elements between a particular range.
  >> s.erase(1); // Deletes element with value 1
  // To delete elements in a range:
  >>  s.erase(s.find(1), s.find(2));

8: size() - Returns the size of the unordered set.
  >> s.size();

9: empty() - Checks if the unordered set is empty or not.
  >> s.empty();
